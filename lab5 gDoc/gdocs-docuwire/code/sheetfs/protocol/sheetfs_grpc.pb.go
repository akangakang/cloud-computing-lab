// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package fs_rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MasterNodeClient is the client API for MasterNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MasterNodeClient interface {
	RegisterDataNode(ctx context.Context, in *RegisterDataNodeRequest, opts ...grpc.CallOption) (*RegisterDataNodeReply, error)
	CreateSheet(ctx context.Context, in *CreateSheetRequest, opts ...grpc.CallOption) (*CreateSheetReply, error)
	DeleteSheet(ctx context.Context, in *DeleteSheetRequest, opts ...grpc.CallOption) (*DeleteSheetReply, error)
	OpenSheet(ctx context.Context, in *OpenSheetRequest, opts ...grpc.CallOption) (*OpenSheetReply, error)
	ReadSheet(ctx context.Context, in *ReadSheetRequest, opts ...grpc.CallOption) (*ReadSheetReply, error)
	RecycleSheet(ctx context.Context, in *RecycleSheetRequest, opts ...grpc.CallOption) (*RecycleSheetReply, error)
	ResumeSheet(ctx context.Context, in *ResumeSheetRequest, opts ...grpc.CallOption) (*ResumeSheetReply, error)
	ListSheets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSheetsReply, error)
	ReadCell(ctx context.Context, in *ReadCellRequest, opts ...grpc.CallOption) (*ReadCellReply, error)
	WriteCell(ctx context.Context, in *WriteCellRequest, opts ...grpc.CallOption) (*WriteCellReply, error)
}

type masterNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewMasterNodeClient(cc grpc.ClientConnInterface) MasterNodeClient {
	return &masterNodeClient{cc}
}

func (c *masterNodeClient) RegisterDataNode(ctx context.Context, in *RegisterDataNodeRequest, opts ...grpc.CallOption) (*RegisterDataNodeReply, error) {
	out := new(RegisterDataNodeReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/RegisterDataNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) CreateSheet(ctx context.Context, in *CreateSheetRequest, opts ...grpc.CallOption) (*CreateSheetReply, error) {
	out := new(CreateSheetReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/CreateSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) DeleteSheet(ctx context.Context, in *DeleteSheetRequest, opts ...grpc.CallOption) (*DeleteSheetReply, error) {
	out := new(DeleteSheetReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/DeleteSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) OpenSheet(ctx context.Context, in *OpenSheetRequest, opts ...grpc.CallOption) (*OpenSheetReply, error) {
	out := new(OpenSheetReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/OpenSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) ReadSheet(ctx context.Context, in *ReadSheetRequest, opts ...grpc.CallOption) (*ReadSheetReply, error) {
	out := new(ReadSheetReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/ReadSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) RecycleSheet(ctx context.Context, in *RecycleSheetRequest, opts ...grpc.CallOption) (*RecycleSheetReply, error) {
	out := new(RecycleSheetReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/RecycleSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) ResumeSheet(ctx context.Context, in *ResumeSheetRequest, opts ...grpc.CallOption) (*ResumeSheetReply, error) {
	out := new(ResumeSheetReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/ResumeSheet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) ListSheets(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListSheetsReply, error) {
	out := new(ListSheetsReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/ListSheets", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) ReadCell(ctx context.Context, in *ReadCellRequest, opts ...grpc.CallOption) (*ReadCellReply, error) {
	out := new(ReadCellReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/ReadCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterNodeClient) WriteCell(ctx context.Context, in *WriteCellRequest, opts ...grpc.CallOption) (*WriteCellReply, error) {
	out := new(WriteCellReply)
	err := c.cc.Invoke(ctx, "/sheetfs.MasterNode/WriteCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterNodeServer is the server API for MasterNode service.
// All implementations must embed UnimplementedMasterNodeServer
// for forward compatibility
type MasterNodeServer interface {
	RegisterDataNode(context.Context, *RegisterDataNodeRequest) (*RegisterDataNodeReply, error)
	CreateSheet(context.Context, *CreateSheetRequest) (*CreateSheetReply, error)
	DeleteSheet(context.Context, *DeleteSheetRequest) (*DeleteSheetReply, error)
	OpenSheet(context.Context, *OpenSheetRequest) (*OpenSheetReply, error)
	ReadSheet(context.Context, *ReadSheetRequest) (*ReadSheetReply, error)
	RecycleSheet(context.Context, *RecycleSheetRequest) (*RecycleSheetReply, error)
	ResumeSheet(context.Context, *ResumeSheetRequest) (*ResumeSheetReply, error)
	ListSheets(context.Context, *Empty) (*ListSheetsReply, error)
	ReadCell(context.Context, *ReadCellRequest) (*ReadCellReply, error)
	WriteCell(context.Context, *WriteCellRequest) (*WriteCellReply, error)
	mustEmbedUnimplementedMasterNodeServer()
}

// UnimplementedMasterNodeServer must be embedded to have forward compatible implementations.
type UnimplementedMasterNodeServer struct {
}

func (UnimplementedMasterNodeServer) RegisterDataNode(context.Context, *RegisterDataNodeRequest) (*RegisterDataNodeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDataNode not implemented")
}
func (UnimplementedMasterNodeServer) CreateSheet(context.Context, *CreateSheetRequest) (*CreateSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSheet not implemented")
}
func (UnimplementedMasterNodeServer) DeleteSheet(context.Context, *DeleteSheetRequest) (*DeleteSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSheet not implemented")
}
func (UnimplementedMasterNodeServer) OpenSheet(context.Context, *OpenSheetRequest) (*OpenSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenSheet not implemented")
}
func (UnimplementedMasterNodeServer) ReadSheet(context.Context, *ReadSheetRequest) (*ReadSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadSheet not implemented")
}
func (UnimplementedMasterNodeServer) RecycleSheet(context.Context, *RecycleSheetRequest) (*RecycleSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecycleSheet not implemented")
}
func (UnimplementedMasterNodeServer) ResumeSheet(context.Context, *ResumeSheetRequest) (*ResumeSheetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResumeSheet not implemented")
}
func (UnimplementedMasterNodeServer) ListSheets(context.Context, *Empty) (*ListSheetsReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSheets not implemented")
}
func (UnimplementedMasterNodeServer) ReadCell(context.Context, *ReadCellRequest) (*ReadCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadCell not implemented")
}
func (UnimplementedMasterNodeServer) WriteCell(context.Context, *WriteCellRequest) (*WriteCellReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteCell not implemented")
}
func (UnimplementedMasterNodeServer) mustEmbedUnimplementedMasterNodeServer() {}

// UnsafeMasterNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MasterNodeServer will
// result in compilation errors.
type UnsafeMasterNodeServer interface {
	mustEmbedUnimplementedMasterNodeServer()
}

func RegisterMasterNodeServer(s grpc.ServiceRegistrar, srv MasterNodeServer) {
	s.RegisterService(&MasterNode_ServiceDesc, srv)
}

func _MasterNode_RegisterDataNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterDataNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).RegisterDataNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/RegisterDataNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).RegisterDataNode(ctx, req.(*RegisterDataNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_CreateSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).CreateSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/CreateSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).CreateSheet(ctx, req.(*CreateSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_DeleteSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).DeleteSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/DeleteSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).DeleteSheet(ctx, req.(*DeleteSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_OpenSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).OpenSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/OpenSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).OpenSheet(ctx, req.(*OpenSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_ReadSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).ReadSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/ReadSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).ReadSheet(ctx, req.(*ReadSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_RecycleSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecycleSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).RecycleSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/RecycleSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).RecycleSheet(ctx, req.(*RecycleSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_ResumeSheet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResumeSheetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).ResumeSheet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/ResumeSheet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).ResumeSheet(ctx, req.(*ResumeSheetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_ListSheets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).ListSheets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/ListSheets",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).ListSheets(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_ReadCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).ReadCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/ReadCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).ReadCell(ctx, req.(*ReadCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterNode_WriteCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterNodeServer).WriteCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.MasterNode/WriteCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterNodeServer).WriteCell(ctx, req.(*WriteCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MasterNode_ServiceDesc is the grpc.ServiceDesc for MasterNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MasterNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sheetfs.MasterNode",
	HandlerType: (*MasterNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDataNode",
			Handler:    _MasterNode_RegisterDataNode_Handler,
		},
		{
			MethodName: "CreateSheet",
			Handler:    _MasterNode_CreateSheet_Handler,
		},
		{
			MethodName: "DeleteSheet",
			Handler:    _MasterNode_DeleteSheet_Handler,
		},
		{
			MethodName: "OpenSheet",
			Handler:    _MasterNode_OpenSheet_Handler,
		},
		{
			MethodName: "ReadSheet",
			Handler:    _MasterNode_ReadSheet_Handler,
		},
		{
			MethodName: "RecycleSheet",
			Handler:    _MasterNode_RecycleSheet_Handler,
		},
		{
			MethodName: "ResumeSheet",
			Handler:    _MasterNode_ResumeSheet_Handler,
		},
		{
			MethodName: "ListSheets",
			Handler:    _MasterNode_ListSheets_Handler,
		},
		{
			MethodName: "ReadCell",
			Handler:    _MasterNode_ReadCell_Handler,
		},
		{
			MethodName: "WriteCell",
			Handler:    _MasterNode_WriteCell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/sheetfs.proto",
}

// DataNodeClient is the client API for DataNode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataNodeClient interface {
	ReadChunk(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (*ReadChunkReply, error)
	WriteChunk(ctx context.Context, in *WriteChunkRequest, opts ...grpc.CallOption) (*WriteChunkReply, error)
	DeleteChunk(ctx context.Context, in *DeleteChunkRequest, opts ...grpc.CallOption) (*DeleteChunkReply, error)
}

type dataNodeClient struct {
	cc grpc.ClientConnInterface
}

func NewDataNodeClient(cc grpc.ClientConnInterface) DataNodeClient {
	return &dataNodeClient{cc}
}

func (c *dataNodeClient) ReadChunk(ctx context.Context, in *ReadChunkRequest, opts ...grpc.CallOption) (*ReadChunkReply, error) {
	out := new(ReadChunkReply)
	err := c.cc.Invoke(ctx, "/sheetfs.DataNode/ReadChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) WriteChunk(ctx context.Context, in *WriteChunkRequest, opts ...grpc.CallOption) (*WriteChunkReply, error) {
	out := new(WriteChunkReply)
	err := c.cc.Invoke(ctx, "/sheetfs.DataNode/WriteChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataNodeClient) DeleteChunk(ctx context.Context, in *DeleteChunkRequest, opts ...grpc.CallOption) (*DeleteChunkReply, error) {
	out := new(DeleteChunkReply)
	err := c.cc.Invoke(ctx, "/sheetfs.DataNode/DeleteChunk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataNodeServer is the server API for DataNode service.
// All implementations must embed UnimplementedDataNodeServer
// for forward compatibility
type DataNodeServer interface {
	ReadChunk(context.Context, *ReadChunkRequest) (*ReadChunkReply, error)
	WriteChunk(context.Context, *WriteChunkRequest) (*WriteChunkReply, error)
	DeleteChunk(context.Context, *DeleteChunkRequest) (*DeleteChunkReply, error)
	mustEmbedUnimplementedDataNodeServer()
}

// UnimplementedDataNodeServer must be embedded to have forward compatible implementations.
type UnimplementedDataNodeServer struct {
}

func (UnimplementedDataNodeServer) ReadChunk(context.Context, *ReadChunkRequest) (*ReadChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadChunk not implemented")
}
func (UnimplementedDataNodeServer) WriteChunk(context.Context, *WriteChunkRequest) (*WriteChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WriteChunk not implemented")
}
func (UnimplementedDataNodeServer) DeleteChunk(context.Context, *DeleteChunkRequest) (*DeleteChunkReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteChunk not implemented")
}
func (UnimplementedDataNodeServer) mustEmbedUnimplementedDataNodeServer() {}

// UnsafeDataNodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataNodeServer will
// result in compilation errors.
type UnsafeDataNodeServer interface {
	mustEmbedUnimplementedDataNodeServer()
}

func RegisterDataNodeServer(s grpc.ServiceRegistrar, srv DataNodeServer) {
	s.RegisterService(&DataNode_ServiceDesc, srv)
}

func _DataNode_ReadChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).ReadChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.DataNode/ReadChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).ReadChunk(ctx, req.(*ReadChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_WriteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WriteChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).WriteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.DataNode/WriteChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).WriteChunk(ctx, req.(*WriteChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataNode_DeleteChunk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteChunkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataNodeServer).DeleteChunk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/sheetfs.DataNode/DeleteChunk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataNodeServer).DeleteChunk(ctx, req.(*DeleteChunkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataNode_ServiceDesc is the grpc.ServiceDesc for DataNode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataNode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sheetfs.DataNode",
	HandlerType: (*DataNodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ReadChunk",
			Handler:    _DataNode_ReadChunk_Handler,
		},
		{
			MethodName: "WriteChunk",
			Handler:    _DataNode_WriteChunk_Handler,
		},
		{
			MethodName: "DeleteChunk",
			Handler:    _DataNode_DeleteChunk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protocol/sheetfs.proto",
}
